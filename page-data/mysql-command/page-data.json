{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/mysql-command/",
    "result": {"data":{"cur":{"id":"9377993e-d015-55ab-948a-9291659abbdb","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<p>저는 아직 MySQL초보이기 때문에, 여러 명령어를 사용해 놓고도 시간이 조금 지나면 까먹을 때가 종종 있습니다(어…그 명령어가 뭐드라..?!?!). 그래서 제가 생각하기에 평소에 MySQL을 사용하다가,  알고있으면 쓸모있는 MySQL문법을 이곳에 간단하게 정리해 보려고 합니다.🙌</p>\n<br>\r\n<br>\n<h2 id=\"-알아두면-쓸모있는-mysql-명령어-모음\" style=\"position:relative;\"><a href=\"#-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%93%B8%EB%AA%A8%EC%9E%88%EB%8A%94-mysql-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C\" aria-label=\" 알아두면 쓸모있는 mysql 명령어 모음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔎 알아두면 쓸모있는 MySQL 명령어 모음</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># 기존 컬럼에 AUTO_INCREMENT, PK 속성 추가</span>\r\n<span class=\"token comment\"># 문법: ALTER TABLE [테이블명] MODIFY [컬럼명] [타입] [속성]</span>\r\nALTER TABLE table MODIFY <span class=\"token builtin\">id</span> BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># auto_increment 다시 1로 세팅</span>\r\nalter table <span class=\"token operator\">&lt;</span>table name<span class=\"token operator\">></span> auto_increment <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n  \r\n<span class=\"token comment\"># 기존 테이블에 신규 컬럼 추가</span>\r\n<span class=\"token comment\"># 문법: ALTER TABLE [테이블명] ADD [컬럼명] [타입] [속성]</span>\r\nALTER TABLE table ADD name VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 문자열에 공백 제거</span>\r\n<span class=\"token comment\"># TRIM - 문자열 좌우 공백 제거</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span><span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM - 문자열 좌측 공백 제거 (LEADING)</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span>LEADING FROM <span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM - 문자열 우측 공백 제거 (TRAILING)</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span>TRAILING FROM <span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 여러 문자열을 구분하여 하나의 문자열로 합치기</span>\r\nSELECT CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FirstName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'LastName'</span><span class=\"token punctuation\">)</span> full_name FROM table<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM과 CONCAT_WS 응용</span>\r\nSELECT CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> trim<span class=\"token punctuation\">(</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> trim<span class=\"token punctuation\">(</span>LastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> full_name FROM table<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 데이터 베이스에 속한 테이블들의 각종 정보 확인</span>\r\nshow table status <span class=\"token keyword\">from</span> `database`<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># CASE문 : MySQL에서 CASE문은 프로그래밍 언어에서 스위치(switch)문과 비슷하지만, 다수의 조건에 하나의 반환 값은 동작하지 않는다.</span>\r\n<span class=\"token comment\"># 문법: SELECT CASE [컬럼명] WHEN [조건] TEHN [결과값] WHEN [조건] TEHN [결과값] ... ELSE [결과값] END FROM [테이블명]</span>\r\nSELECT CASE column WHEN <span class=\"token string\">'N'</span> THEN <span class=\"token string\">\"실패\"</span> WHEN <span class=\"token string\">'Y'</span> THEN <span class=\"token string\">\"성공\"</span> END <span class=\"token keyword\">as</span> success_column FROM table<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 특정 문자로 시작하는 데이터 검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '특정 문자열%;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '홍<span class=\"token operator\">%</span>\r\n\r\n<span class=\"token comment\"># 특정 문자로 끝나는 데이터 검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '% 특정 문자열;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '<span class=\"token operator\">%</span> 길동<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># 특정 문자 포함  데이터  검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '% 특정 문자열%;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '<span class=\"token operator\">%</span> 길동<span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 페이징 시 쿼리 - LIMIT: 행을 얼마나 가져올지, OFFSET: 어디서 부터 가져올지</span>\r\n<span class=\"token comment\"># 숫자 만큼의 행을 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDERS LIMIT 숫자;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER orders LIMIT <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n  \r\n<span class=\"token comment\"># (B+1) 행 부터 A 행 만큼 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDERS LIMIT 숫자(A) OFFSET 숫자(B);</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER ORDERS LIMIT <span class=\"token number\">10</span> OFFSET <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># (A+1)부터 B개의 행을 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDER LIMIT 숫자(A), 숫자(B);</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER ORDERS LIMIT <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<br>\n<p>페이징을 처리할 수 있는 쿼리인 [OFFSET]에 대해서는 다음 포스팅에 조금 더 자세히 다루어 보도록 하겠습니다.😀</p>\n<br>\r\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://zzang9ha.tistory.com/295\">https://zzang9ha.tistory.com/295</a></li>\n<li><a href=\"https://extbrain.tistory.com/\">https://extbrain.tistory.com/</a></li>\n<li><a href=\"https://pangtrue.tistory.com/170\">https://pangtrue.tistory.com/170</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li><a href=\"#-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%93%B8%EB%AA%A8%EC%9E%88%EB%8A%94-mysql-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C\">🔎 알아두면 쓸모있는 MySQL 명령어 모음</a></li>\n</ul>\n</div>","excerpt":"💡 Intro 저는 아직 MySQL초보이기 때문에, 여러 명령어를 사용해 놓고도 시간이 조금 지나면 까먹을 때가 종종 있습니다(어…그 명령어가 뭐드라..?!?!). 그래서 제가 생각하기에 평소에 MySQL을 사용하다가,  알고있으면 쓸모있는 MySQL문법을 이곳에 간단하게 정리해 보려고 합니다.🙌 🔎 알아두면 쓸모있는 MySQL 명령어 모음 페이징을 처리할 수 있는 쿼리인 [OFFSET]에 대해서는 다음 포스팅에 조금 더 자세히 다루어 보도록 하겠습니다.😀 [참고자료] https://zzang9ha.tistory.com/295 https://extbrain.tistory.com/ https://pangtrue.tistory.com/170 💡 Intro 🔎 알아두면 쓸모있는 MySQL 명령어 모음","frontmatter":{"date":"April 19, 2022","title":"알아두면 쓸모있는 MySQL 명령어 모음","categories":"MySQL","author":"Liam","emoji":"🌎"},"fields":{"slug":"/mysql-command/"}},"next":{"id":"a9f05c0b-c942-5562-abd1-1aa9e737fab3","html":"<h2 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 Intro</h2>\n<p>저는 아직 MySQL초보이기 때문에, 여러 명령어를 사용해 놓고도 시간이 조금 지나면 까먹을 때가 종종 있습니다(어…그 명령어가 뭐드라..?!?!). 그래서 제가 생각하기에 평소에 MySQL을 사용하다가,  알고있으면 쓸모있는 MySQL문법을 이곳에 간단하게 정리해 보려고 합니다.🙌</p>\n<br>\r\n<br>\n<h2 id=\"-알아두면-쓸모있는-mysql-명령어-모음\" style=\"position:relative;\"><a href=\"#-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%93%B8%EB%AA%A8%EC%9E%88%EB%8A%94-mysql-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C\" aria-label=\" 알아두면 쓸모있는 mysql 명령어 모음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔎 알아두면 쓸모있는 MySQL 명령어 모음</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># 기존 컬럼에 AUTO_INCREMENT, PK 속성 추가</span>\r\n<span class=\"token comment\"># 문법: ALTER TABLE [테이블명] MODIFY [컬럼명] [타입] [속성]</span>\r\nALTER TABLE table MODIFY <span class=\"token builtin\">id</span> BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># auto_increment 다시 1로 세팅</span>\r\nalter table <span class=\"token operator\">&lt;</span>table name<span class=\"token operator\">></span> auto_increment <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n  \r\n<span class=\"token comment\"># 기존 테이블에 신규 컬럼 추가</span>\r\n<span class=\"token comment\"># 문법: ALTER TABLE [테이블명] ADD [컬럼명] [타입] [속성]</span>\r\nALTER TABLE table ADD name VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> NOT NULL<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 문자열에 공백 제거</span>\r\n<span class=\"token comment\"># TRIM - 문자열 좌우 공백 제거</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span><span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM - 문자열 좌측 공백 제거 (LEADING)</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span>LEADING FROM <span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM - 문자열 우측 공백 제거 (TRAILING)</span>\r\nSELECT TRIM<span class=\"token punctuation\">(</span>TRAILING FROM <span class=\"token string\">' aabbccbbaa '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 여러 문자열을 구분하여 하나의 문자열로 합치기</span>\r\nSELECT CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FirstName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'LastName'</span><span class=\"token punctuation\">)</span> full_name FROM table<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># TRIM과 CONCAT_WS 응용</span>\r\nSELECT CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> trim<span class=\"token punctuation\">(</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> trim<span class=\"token punctuation\">(</span>LastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> full_name FROM table<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 데이터 베이스에 속한 테이블들의 각종 정보 확인</span>\r\nshow table status <span class=\"token keyword\">from</span> `database`<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># CASE문 : MySQL에서 CASE문은 프로그래밍 언어에서 스위치(switch)문과 비슷하지만, 다수의 조건에 하나의 반환 값은 동작하지 않는다.</span>\r\n<span class=\"token comment\"># 문법: SELECT CASE [컬럼명] WHEN [조건] TEHN [결과값] WHEN [조건] TEHN [결과값] ... ELSE [결과값] END FROM [테이블명]</span>\r\nSELECT CASE column WHEN <span class=\"token string\">'N'</span> THEN <span class=\"token string\">\"실패\"</span> WHEN <span class=\"token string\">'Y'</span> THEN <span class=\"token string\">\"성공\"</span> END <span class=\"token keyword\">as</span> success_column FROM table<span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 특정 문자로 시작하는 데이터 검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '특정 문자열%;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '홍<span class=\"token operator\">%</span>\r\n\r\n<span class=\"token comment\"># 특정 문자로 끝나는 데이터 검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '% 특정 문자열;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '<span class=\"token operator\">%</span> 길동<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># 특정 문자 포함  데이터  검색</span>\r\n<span class=\"token comment\"># 문법: SELECT [필드명] FROM [테이블명] WHERE [필드명] LIKE '% 특정 문자열%;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM member WHERE name LIKE '<span class=\"token operator\">%</span> 길동<span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\r\n\r\n\r\n\r\n\r\n<span class=\"token comment\"># 페이징 시 쿼리 - LIMIT: 행을 얼마나 가져올지, OFFSET: 어디서 부터 가져올지</span>\r\n<span class=\"token comment\"># 숫자 만큼의 행을 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDERS LIMIT 숫자;</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER orders LIMIT <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n  \r\n<span class=\"token comment\"># (B+1) 행 부터 A 행 만큼 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDERS LIMIT 숫자(A) OFFSET 숫자(B);</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER ORDERS LIMIT <span class=\"token number\">10</span> OFFSET <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\"># (A+1)부터 B개의 행을 출력</span>\r\n<span class=\"token comment\"># 문법: SELECT * FROM 테이블명 ORDER LIMIT 숫자(A), 숫자(B);</span>\r\nSELECT <span class=\"token operator\">*</span> FROM USER ORDERS LIMIT <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<br>\n<p>페이징을 처리할 수 있는 쿼리인 [OFFSET]에 대해서는 다음 포스팅에 조금 더 자세히 다루어 보도록 하겠습니다.😀</p>\n<br>\r\n<br>\n<p><strong>[참고자료]</strong></p>\n<ul>\n<li><a href=\"https://zzang9ha.tistory.com/295\">https://zzang9ha.tistory.com/295</a></li>\n<li><a href=\"https://extbrain.tistory.com/\">https://extbrain.tistory.com/</a></li>\n<li><a href=\"https://pangtrue.tistory.com/170\">https://pangtrue.tistory.com/170</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-intro\">💡 Intro</a></li>\n<li><a href=\"#-%EC%95%8C%EC%95%84%EB%91%90%EB%A9%B4-%EC%93%B8%EB%AA%A8%EC%9E%88%EB%8A%94-mysql-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C\">🔎 알아두면 쓸모있는 MySQL 명령어 모음</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 19, 2022","title":"알아두면 쓸모있는 MySQL 명령어 모음","categories":"MySQL","author":"Liam","emoji":"🌎"},"fields":{"slug":"/Mysql-offset/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://liampoet.github.io","comments":{"utterances":{"repo":"liampoet/liampoet.github.io"}}}}},"pageContext":{"slug":"/mysql-command/","nextSlug":"/Mysql-offset/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}